//
// Generated file, do not edit! Created by nedtool 5.4 from src/messages/RoutingMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_ROUTINGMESSAGE_M_H
#define __INET_ROUTINGMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class RoutingMessage;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace inet {

/**
 * Class generated from <tt>src/messages/RoutingMessage.msg:29</tt> by nedtool.
 * <pre>
 * class RoutingMessage extends FieldsChunk
 * {
 *     L3Address srcAddr;
 *     L3Address destAddr;
 * 
 *     Coord sinkPosition;
 * 
 *     Coord nodePosition;
 *     double nodeEnergy;
 * }
 * </pre>
 */
class RoutingMessage : public ::inet::FieldsChunk
{
  protected:
    L3Address srcAddr;
    L3Address destAddr;
    Coord sinkPosition;
    Coord nodePosition;
    double nodeEnergy = 0;

  private:
    void copy(const RoutingMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RoutingMessage&);

  public:
    RoutingMessage();
    RoutingMessage(const RoutingMessage& other);
    virtual ~RoutingMessage();
    RoutingMessage& operator=(const RoutingMessage& other);
    virtual RoutingMessage *dup() const override {return new RoutingMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const L3Address& getSrcAddr() const;
    virtual L3Address& getSrcAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RoutingMessage*>(this)->getSrcAddr());}
    virtual void setSrcAddr(const L3Address& srcAddr);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<RoutingMessage*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual const Coord& getSinkPosition() const;
    virtual Coord& getSinkPositionForUpdate() { handleChange();return const_cast<Coord&>(const_cast<RoutingMessage*>(this)->getSinkPosition());}
    virtual void setSinkPosition(const Coord& sinkPosition);
    virtual const Coord& getNodePosition() const;
    virtual Coord& getNodePositionForUpdate() { handleChange();return const_cast<Coord&>(const_cast<RoutingMessage*>(this)->getNodePosition());}
    virtual void setNodePosition(const Coord& nodePosition);
    virtual double getNodeEnergy() const;
    virtual void setNodeEnergy(double nodeEnergy);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RoutingMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RoutingMessage& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ROUTINGMESSAGE_M_H

